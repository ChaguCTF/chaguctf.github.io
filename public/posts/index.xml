<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ChaGu CTF</title>
    <link>http://example.org/posts/</link>
    <description>Recent content in Posts on ChaGu CTF</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Feb 2017 11:22:32 +0200</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AlexCTF Fore4: Unknown format 200p</title>
      <link>http://example.org/posts/alexctf-2017-02-05_fore4/</link>
      <pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate>
      
      <guid>http://example.org/posts/alexctf-2017-02-05_fore4/</guid>
      <description>Once more our agents managed to sniff data passed over USB, they told us that this is high profile data hidden by people knows what they are doing, they have dedicated devices for reading that secret file format. Can you help us finding what is the secret message?
Let&amp;rsquo;s begin We begun by running strings and binwalk to see if anything interesting showed. The strings command returned a whole lot of data, among the strings we found:</description>
    </item>
    
    <item>
      <title>AlexCTF Re2 : C&#43;&#43; is fun: [100]</title>
      <link>http://example.org/posts/alexctf-2017-02-05_re2/</link>
      <pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate>
      
      <guid>http://example.org/posts/alexctf-2017-02-05_re2/</guid>
      <description>So you get a binary when running it you get a message to enter the flag. When entering somthing wrong it tells you to try again. However, since I know that the flag starts with &amp;ldquo;ALEXCTF{&amp;rdquo; I trief that and got the message &amp;ldquo;You should have the flag by now&amp;rdquo; then I thought that the original code might look somthing like this
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;using namespace std; int main () { string flag=&amp;#34;.</description>
    </item>
    
    <item>
      <title>AlexCTF Re4: Python rev</title>
      <link>http://example.org/posts/alexctf-2017-02-05_re4/</link>
      <pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate>
      
      <guid>http://example.org/posts/alexctf-2017-02-05_re4/</guid>
      <description>In this challenge we got a python byte-code file. So the first step was to get the source code for this file. By using uncompyle2 we could get the python source code. That looked like this.
import md5 md5s = [174282896860968005525213562254350376167L, 137092044126081477479435678296496849608L, 126300127609096051658061491018211963916L, 314989972419727999226545215739316729360L, 256525866025901597224592941642385934114L, 115141138810151571209618282728408211053L, 8705973470942652577929336993839061582L, 256697681645515528548061291580728800189L, 39818552652170274340851144295913091599L, 65313561977812018046200997898904313350L, 230909080238053318105407334248228870753L, 196125799557195268866757688147870815374L, 74874145132345503095307276614727915885L] print &amp;#39;Can you turn me back to python ? ...&amp;#39; flag = raw_input(&amp;#39;well as you wish.. what is the flag: &amp;#39;) if len(flag) &amp;gt; 69: print &amp;#39;nice try&amp;#39; exit() if len(flag) % 5 !</description>
    </item>
    
    <item>
      <title>AlexCTF TR4: Flag logo</title>
      <link>http://example.org/posts/alexctf-2017-02-05_tr4/</link>
      <pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate>
      
      <guid>http://example.org/posts/alexctf-2017-02-05_tr4/</guid>
      <description>This challenge is just a simple warm up. They were asking about our opinion of their logo. It was an ASCII art flag. Taking a closer look you can see tha the whole flag is made of special charaters except for some numbers and letters showing up. Since I know the format of the flag will be in l337 speak. I dumped the logo in a text file. I wrote this simple script to extract the flag that was ALEXCTF{0UR_L0G0_R0CKS}</description>
    </item>
    
    <item>
      <title>Insomni&#39;hack teaser - Cryptoquizz (crypto/misc 50)</title>
      <link>http://example.org/posts/insomnihack_teaser_2017_cryptoquiz/</link>
      <pubDate>Sun, 22 Jan 2017 11:22:32 +0200</pubDate>
      
      <guid>http://example.org/posts/insomnihack_teaser_2017_cryptoquiz/</guid>
      <description>This was an interesting challange. You started by connecting with telnet to the server specified in the challenge description. Once connected, a question was asked: What is the birth year of [known cryptographer]? You had 2 seconds to react before the server disconnected you. Once you connected again, the server asked the same question but for a different person. I begun connecting over and over again to see if there was a pattern or if the selection of people was small.</description>
    </item>
    
    <item>
      <title>Insomni&#39;hack teaser - Shobot (web 200)</title>
      <link>http://example.org/posts/insomnihack_teaser_2017_shobot/</link>
      <pubDate>Sun, 22 Jan 2017 11:22:32 +0200</pubDate>
      
      <guid>http://example.org/posts/insomnihack_teaser_2017_shobot/</guid>
      <description>You were presented with an online store that sold robots. We didn&amp;rsquo;t manage to solve this challenge in time.
What we did correct The website had a function running that calculates a user&amp;rsquo;s trust level based on how many products he/she buys. If you tried any SQL injection in the URL parameters with low trust level, the server would detect it and lower your trust level. Once you reached the maximum trust level, you could successfully execute SQL injections.</description>
    </item>
    
    <item>
      <title>Insomni&#39;hack teaser - Smarttomcat (web 50)</title>
      <link>http://example.org/posts/insomnihack_teaser_2017_smarttomcat/</link>
      <pubDate>Sun, 22 Jan 2017 11:22:32 +0200</pubDate>
      
      <guid>http://example.org/posts/insomnihack_teaser_2017_smarttomcat/</guid>
      <description>For this challenge, you are supposed to enter the correct coordinates to find the robot cat.
For these types of challenges, I like using burp suite in order to record and modify HTTP requests. The following request was recorded when entering some random values.
POST /index.php HTTP/1.1 Host: smarttomcat.teaser.insomnihack.ch User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Referer: http://smarttomcat.</description>
    </item>
    
  </channel>
</rss>
