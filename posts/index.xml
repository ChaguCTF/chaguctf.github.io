<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ChaGu CTF</title><link>https://chagu.org/posts/</link><description>Recent content in Posts on ChaGu CTF</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Nov 2021 11:22:32 +0100</lastBuildDate><atom:link href="https://chagu.org/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>FOI 2021: Tokfrans (490pts)</title><link>https://chagu.org/posts/foi-2021_tokfrans/</link><pubDate>Tue, 02 Nov 2021 11:22:32 +0100</pubDate><guid>https://chagu.org/posts/foi-2021_tokfrans/</guid><description>The goal of the task is to find a flag somewhere by following the link to http://challenges.ctf.crate.foi.se:18263. We know that it is possible to login on the page by using the credentials: acc: zeke pass: irule42.
Exploring the website Upon entering the site we get prompted with a login form.
When logged in the only information displayed to us is:
Logged in as zeke No flags to show. By opening the cookies page it is possible to notice that the site is saving information about the user.</description></item><item><title>FOI 2021: Ã…ttahundra punkt elva (463 pts)</title><link>https://chagu.org/posts/foi-2021_attahundra_punk_elva/</link><pubDate>Tue, 02 Nov 2021 11:22:32 +0100</pubDate><guid>https://chagu.org/posts/foi-2021_attahundra_punk_elva/</guid><description>In this task we get a network dump containing as the title peaks, 802.11 traffic. The goal is to decrypt the wpa protocol to be able to read the messages and hopefully find the flag in one of these messages.
Cracking WPA If the dump contains the WPA handshake and SSID of the used access-point the decrypting should be a breeze in the park. An easy way to find out about the handshake this is by filtering for the protocol &amp;ldquo;EAPOL&amp;rdquo; in wireshark.</description></item><item><title>SEC-T CTF: G1bs0n - misc 300</title><link>https://chagu.org/posts/sec-t_2017_g1bs0n_misc_300/</link><pubDate>Fri, 15 Sep 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/sec-t_2017_g1bs0n_misc_300/</guid><description>@mjdubell - ChalmersCTF Agent Gill called, we have until tomorrow at 15:00 UTC to fix some virus problem. File: G1bs0n.tar.gz Even though I followed too many rabbit holes, this was a fun challenge to work on. In order to solve this challenge, you would need some basic understanding on how to analyze memory dumps. I solved this challenge with volatility which is a forensic tool for analyzing memory dumps, and it&amp;rsquo;s built with python!</description></item><item><title>UIUCTF 2017 CTF: Are we out of the woods yet?</title><link>https://chagu.org/posts/uiuctf-2017_out_of_the_woods_rev350/</link><pubDate>Sun, 30 Apr 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/uiuctf-2017_out_of_the_woods_rev350/</guid><description>350 Points - Reversing It looks like this python script was run through a custom packer. It's just Python*, which means it must be easy to reverse, right? *v3.6.1:69c0db5 https://www.youtube.com/watch?v=y8qQsXpcZXA This was fun little challenge that our team solved together. You are presented with the file packed.py that contains the following code:
import marshal, zlib, base64, itertools def xor_strings(_left, _k): out = b'' for l, r in zip(_left, itertools.cycle(_k)): out += (l ^ ord(r)).</description></item><item><title>VolgaCTF 2017: Bloody Feedback - web 100</title><link>https://chagu.org/posts/volgactf-2017-quals_bloody_feedback_web_100/</link><pubDate>Sun, 26 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/volgactf-2017-quals_bloody_feedback_web_100/</guid><description>Author: @mjdubell
Bloody Feedback Send your feedback at bloody-feedback.quals.2017.volgactf.ru DO. NOT. USE. SQLMAP Otherwise your IP will be banned The challenge basically has two functions, 1) Send feedback and 2) view the status of the sent feedback. There is also page that cotains &amp;ldquo;Top Messages&amp;rdquo; which is the feedback people send in. When you send feedback you get a token back which you can use to see if the feedback has been processed or not.</description></item><item><title>VolgaCTF 2017: Share Point - web 200</title><link>https://chagu.org/posts/volgactf-2017-quals_share_point_web_200/</link><pubDate>Sun, 26 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/volgactf-2017-quals_share_point_web_200/</guid><description>Author: @mjdubell
Share Point Look! I wrote a good service for sharing your files with your friends, enjoy) share-point.quals.2017.volgactf.ru The challenge begun by signing in to the control panel by simply entering random account details. Once logged in you had the ability to upload files and share them with an other user. Since the site only had one functionality, uploading files, I assumed the goal had to be to upload a web shell and find the flag on the file system.</description></item><item><title>Pragyan CTF 2017: Answer to Everything (50pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_bin1/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_bin1/</guid><description>Challenge Description : Shal has got a binary. It contains the name of a wise man and his flag. He is unable to solve it. Submit the flag to unlock the secrets of the universe. NOTE :- Please enclose the flag in the format pragyanctf{&amp;lt;flag&amp;gt;}. Hint! Sometimes, the best place to hide is plain sight. Hint! SHAl didn't try one thing, which is what he is. File : main.exe Solution: I started by firing up the IDA to analyze the binary after running file which told me its an ELF64 binary.</description></item><item><title>Pragyan CTF 2017: Evil Corp (100pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_cr2/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_cr2/</guid><description>By: ChalmersCTF
Challenge Description : fsociety has launched another attack at Evil Corp. However, Evil Corp has decided to encrypt the .dat file with a CBC cipher. Reports reveal that it is not AES and the key is relatively simple, but the IV might be long. And remember, fsociety and evilcorp are closely linked. NOTE :- Please enclose the flag in the format pragyanctf{&amp;lt;flag&amp;gt;}. Hint! Snakes serve the fsociety. Hmmm. Hint!</description></item><item><title>Pragyan CTF 2017: Game of Fame (50pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_cr1/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_cr1/</guid><description>By: [noras] from ChalmersCTF
Challenge Description : p xasc. a zdmik qtng. yiy uist. easc os iye iq trmkbumk. gwv wolnrg kaqcs vi rlr. NOTE :- Please enclose the flag in the format pragyanctf{&amp;lt;flag&amp;gt;}. Hint! The seven star-studded Pragyan walks into the hall of fame. Boom! Hint! Robert Sedgewick Solution: Playing around with the cipher text on this site I noticed somthing interesting when using the Vigenere Cipher. And that was that it suggest that they key might be PRAQJAN.</description></item><item><title>Pragyan CTF 2017: Give The Guy (100pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_web1/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_web1/</guid><description>By: ChalmersCTF
Challenge Description : Hacker G has a website. Can you use it to decipher this cipher text ? Cipher text :- dobrjtuojxagbqhd Link : http://139.59.62.216/give_the_guy/ NOTE :- Please enclose the flag in the format pragyanctf{&amp;lt;flag&amp;gt;}. Solution: After brute forcing the challenge, probing for hidden directories/files, it turned out that if you simply run Affine-cipher on the ciphertext, you get the flag&amp;hellip;</description></item><item><title>Pragyan CTF 2017: Interstellar (150pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_for2/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_for2/</guid><description>By: [noras] from ChalmersCTF
Challenge Description : Dr. Cooper, on another one of his endless journeys encounter a mysterious planet. However when he tried to land on it, the ship gave way and he was left stranded on the planet. Desperate for help, he relays a message to the mothership containing the details of the people with him. Their HyperPhotonic transmission is 10 times the speed of light, so there is no delay in the message.</description></item><item><title>Pragyan CTF 2017: Look Harder (50pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_for1/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_for1/</guid><description>By: [noras] from ChalmersCTF
Challenge Description : There are rumours that in the Great Sahara Desert, a great treasure has been buried deep inside the ground, but the map for the exact location of the treasure over the years, has not been preserved properly. You have got hold of the map, but it looks nothing more than a plain white sheet of paper. Can you make sense out of it ?</description></item><item><title>Pragyan CTF 2017: Lost Friends (300pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_steg3/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_steg3/</guid><description>By: [noras] from ChalmersCTF
Challenge Description : Moana and her friends were out on a sea voyage, spending their summer joyously. Unfortnately, they came across Charybdis, the sea monster. Charybdis, furious over having unknown visitors, wreaked havoc on their ship. The ship was lost. Luckily, Moana survived, and she was swept to a nearby island. But, since then, she has not seen her friends. Moana has come to you for help.</description></item><item><title>Pragyan CTF 2017: MI6 (100pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_rev1/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_rev1/</guid><description>By: [noras] from ChalmersCTF
Challenge Description : Benji is working with Ethan on another case and has caught some suspicious traffic over the Atlantic. Help Benji decode the sequence. 26 25 30 28 22 25 20 23 21 29 22 24 26 23 21 26 27 20 28 22 25 23 30 29 23 28 24 20 21 26 25 20 23 27 23 29 25 22 23 26 27 29 24 23 30 21 25 24 26 20 24 22 21 30 26 20 25 24 21 23 27 29 26 22 20 21 23 22 30 26 29 26 28 27 22 20 27 29 26 30 28 27 26 23 29 21 22 25 27 24 21 29 25 24 20 25 23 22 30 28 27 29 25 20 24 21 23 20 23 21 29 26 NOTE :- Please enclose the flag in the format pragyanctf{&amp;lt;flag&amp;gt;}.</description></item><item><title>Pragyan CTF 2017: New Avenger (300pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_steg4/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_steg4/</guid><description>By: [noras] from ChalmersCTF
Challenge Description : The Avengers are scouting for a new member. They have travelled all around the world, looking for suitable candidates for the new position. Finally, they have found the perfect candidate. But, they are in a bad situation. They do not know who the guy is behind the mask. Can you help the Avengers to uncover the identity of the person behind the mask ?</description></item><item><title>Pragyan CTF 2017: Roller Coaster Ride (150pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_bin3/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_bin3/</guid><description>Challenge Description : Bobby has been into Reverse Engineering and Binary Exploitation lately. One day, he went to an amusement park in his city. It was very famouse for its Roller Coaster Rides. But, Bobby, being 12 years old, was not allowed on those rides, as it was open for people who were 14 years or older. This made Bobby very angry. On reaching home, he hacked into the servers of the amusement park, got hold of the validation software for the Roller Coaster rides, and modified it, so that nobody is allowed to have a ride on those Roller Coasters.</description></item><item><title>Pragyan CTF 2017: Shane and the binary files (100pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_bin2/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_bin2/</guid><description>Challenge Description : Shane is a part of one of the teams in the FBI, which is currently handling a very weird cyber crime case. As a part of the investigation, Shane was asked to analyze a series of binary files, one of which is known to give out a password. Shane got the files in a zip file named &amp;quot;parallel.zip&amp;quot;. Could you help him do it ? NOTE :- Please enclose the flag in the format pragyanctf{&amp;lt;flag&amp;gt;}.</description></item><item><title>Pragyan CTF 2017: Star Wars (100pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_steg1/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_steg1/</guid><description>By: [noras] from ChalmersCTF
Challenge Description : Don't search blindly. Look carefully and you will find what you are looking for. Hint! This challenge is specially made for blind persons :P File : star-wars.jpg Solution: Nothing speacial with the image when you look at it:
Running strings reveal a bit encoded thing with 54 bits:
100110 101010 101010 111010 100110 1010101 011101 010100 11110 Since the hint mention that it was made for a blind person I look you &amp;ldquo;blind alphabet&amp;rdquo; on google and i found that they are a part of a six-bit character code called Braille codes.</description></item><item><title>Pragyan CTF 2017: Supreme Leader (150pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_web2/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_web2/</guid><description>By: ChalmersCTF
Challenge Description : North Korea reportedly has a bioweapon in the making. Hack into their database and steal it. Link : http://139.59.62.216/supreme_leader NOTE :- Please enclose the flag in the format pragyanctf{&amp;lt;flag&amp;gt;}. Solution: Using burpsuite we could notice that there are two cookies getting set.
The first one does not apper when looking at the browser cookies because its getting over written have the value:
2541d938b0a58946090d7abdde0d3890_b8e2e0e422cae4838fb788c891afb44
Using hashkiller we got:</description></item><item><title>Pragyan CTF 2017: The Karaboudjan (150pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_for3/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_for3/</guid><description>By: [noras] from ChalmersCTF
Challenge Description : Captain Haddock is on one of his ship sailing journeys when he gets stranded off the coast of North Korea. He finds shelter off a used nuke and decides to use the seashells to engrave a message on a piece of paper. Decrypt the message and save Captain Haddock. -&amp;gt;-.&amp;gt;-.---.--&amp;gt;-.&amp;gt;.&amp;gt;+.--&amp;gt;--..++++. .+++. .-&amp;gt;-.-&amp;gt;-.++++++++++.+&amp;gt;+++.++.-[-&amp;gt;+++&amp;lt;]&amp;gt;+.+++++.++++++++++..++++[-&amp;gt;+++&amp;lt;]&amp;gt;.--.-&amp;gt;--.&amp;gt;. NOTE :- Please enclose the flag in the format pragyanctf{&amp;lt;flag&amp;gt;}. File : clue.</description></item><item><title>Pragyan CTF 2017: The Vault (75pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_misc2/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_misc2/</guid><description>By: ChalmersCTF
Challenge Description : [!@# a-z $%^ A-Z &amp;amp;* 0-9] [1,3] File : file
Solution: Running file on the included file revealed that its a keepass file. And the regex seems to be the clue about the password.
$ file file file.kdb: Keepass password database 1.x KDB, 3 groups, 4 entries, 50000 key transformation rounds So we generate passwordlist using the regex
#!/usr/bin/env python import string import itertools table = string.</description></item><item><title>NullCon 2017: Crypto2 [350]: Breaking bad key exchange</title><link>https://chagu.org/posts/nullcon_2017_crypto2/</link><pubDate>Sun, 12 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/nullcon_2017_crypto2/</guid><description>Challenge:
Hint 1 : in the range (1 to g*q), there are couple of pairs yielding common secrete as 399. Hint 2 : 'a' and 'b' both are less than 1000 Flag Format: flag{a,b} Solution: TODO: Clean the code
import numpy as np q=541 g=10 alist=[] aplus=[] gaplus=[] for a in range(1,1000,1): if(a&amp;lt;3): v=np.power(g,a)%q alist.append(v) else: v=(alist[a-2]*g)%q alist.append(v) if v==298: aplus.append(a) gaplus.append(v) blist=[] bplus=[] gbplus=[] for b in range(1,1000,1): if(b&amp;lt;3): v=np.</description></item><item><title>NullCon 2017: Misc2 [300]</title><link>https://chagu.org/posts/nullcon_2017_misc2/</link><pubDate>Sun, 12 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/nullcon_2017_misc2/</guid><description>Challenge: &amp;ldquo;Got an artefact file to be analysed. Can you please help me find the hidden data ?&amp;rdquo; and there is a file attached
The first thing I did was to check what type of files by running file and binwalk on it
root@kali:~/Downloads# file artefact artefact: XZ compressed data root@kali:~/Downloads# binwalk artefact DECIMAL HEXADECIMAL DESCRIPTION -------------------------------------------------------------------------------- 0 0x0 xz compressed data So the next step is to decompress it as following:</description></item><item><title>NullCon 2017: Programing1 [200]</title><link>https://chagu.org/posts/nullcon_2017_programming1/</link><pubDate>Sun, 12 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/nullcon_2017_programming1/</guid><description>Challenge: &amp;ldquo;We unearthed this text file from one of the older servers and want to know what this is all about. Could you please analyse this and let us know your finding?&amp;rdquo; and there is a text file attached
I have a quick look at the file and I have a quick guess that its an RGB array because the 3 elemnts tuples are bounded by 255 &amp;ndash;&amp;gt; FF.
I need now to guess the width and the heigth of the image because the values are stuffed in an one dimentional list.</description></item><item><title>AlexCTF CR3: What is this encryption? 150p</title><link>https://chagu.org/posts/alexctf-2017-02-05_cr3/</link><pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/alexctf-2017-02-05_cr3/</guid><description>Fady assumed this time that you will be so n00b to tell what encryption he is using he send the following note to his friend in plain sight:
p=0xa6055ec186de51800ddd6fcbf0192384ff42d707a55f57af4fcfb0d1dc7bd97055e8275cd4b78ec63c5d592f567c66393a061324aa2e6a8d8fc2a910cbee1ed9 q=0xfa0f9463ea0a93b929c099320d31c277e0b0dbc65b189ed76124f5a1218f5d91fd0102a4c8de11f28be5e4d0ae91ab319f4537e97ed74bc663e972a4a9119307 e=0x6d1fdab4ce3217b3fc32c9ed480a31d067fd57d93a9ab52b472dc393ab7852fbcb11abbebfd6aaae8032db1316dc22d3f7c3d631e24df13ef23d3b381a1c3e04abcc745d402ee3a031ac2718fae63b240837b4f657f29ca4702da9af22a3a019d68904a969ddb01bcf941df70af042f4fae5cbeb9c2151b324f387e525094c41 c=0x7fe1a4f743675d1987d25d38111fae0f78bbea6852cba5beda47db76d119a3efe24cb04b9449f53becd43b0b46e269826a983f832abb53b7a7e24a43ad15378344ed5c20f51e268186d24c76050c1e73647523bd5f91d9b6ad3e86bbf9126588b1dee21e6997372e36c3e74284734748891829665086e0dc523ed23c386bb520 He is underestimating our crypto skills!
Recover d This challenge requires some knowledge about basic crypto algorithms. Based on the variables that Fady sent we assumed this was RSA. A formal definition of the RSA algorithm can be expressed as the following:</description></item><item><title>AlexCTF CR4:Poor RSA [200]</title><link>https://chagu.org/posts/alexctf-2017-02-05_cr4/</link><pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/alexctf-2017-02-05_cr4/</guid><description>In this challenge we have a RSA public and a cipher text that we need to decypt. Since we know that RSA is broken only if we can factorize the modulus then thats is apperantly the goal.
To extract the modulus we use openssl to extract that information:
openssl rsa -noout -text -inform PEM -in key.pub -pubin Public-Key: (399 bit) Modulus: 52:a9:9e:24:9e:e7:cf:3c:0c:bf:96:3a:00:96:61: 77:2b:c9:cd:f6:e1:e3:fb:fc:6e:44:a0:7a:5e:0f: 89:44:57:a9:f8:1c:3a:e1:32:ac:56:83:d3:5b:28: ba:5c:32:42:43 Exponent: 65537 (0x10001) 52a99e249ee7cf3c0cbf963a009661772bc9cdf6e1e3fbfc6e44a07a5e0f894457a9f81c3ae132ac5683d35b28ba5c324243 To get the integer representation we run the following:</description></item><item><title>AlexCTF CR5: PRNG</title><link>https://chagu.org/posts/alexctf-2017-02-05_cr5/</link><pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/alexctf-2017-02-05_cr5/</guid><description>In this challenge we had to break a week Pesudo random number generator. We were provided a basic socket connection nc 195.154.53.62 7412 to connect to. When connecting you have to options, (1) guess or (2) get the next number. And apperantly we have to guess a sequence of 10 numbers.
The first part I went through was to collect some data by sending many (2) requests to try to find some pattern by performing statistical analysis and number analyasis and I wrote the following code:</description></item><item><title>AlexCTF Fore3: USB probing [150]</title><link>https://chagu.org/posts/alexctf-2017-02-05_fore3/</link><pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/alexctf-2017-02-05_fore3/</guid><description>In this challenge we got a pcap with some usb traffic dump with the following message: &amp;ldquo;One of our agents managed to sniff important piece of data transferred transmitted via USB, he told us that this pcap file contains all what we need to recover the data can you find it ?&amp;rdquo;
The first thing to do is to fireup wireshark and check what kind of device is hooked up and apperantly it was a USB stick:</description></item><item><title>AlexCTF Fore4: Unknown format 200p</title><link>https://chagu.org/posts/alexctf-2017-02-05_fore4/</link><pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/alexctf-2017-02-05_fore4/</guid><description>Once more our agents managed to sniff data passed over USB, they told us that this is high profile data hidden by people knows what they are doing, they have dedicated devices for reading that secret file format. Can you help us finding what is the secret message?
Let&amp;rsquo;s begin We begun by running strings and binwalk to see if anything interesting showed. The strings command returned a whole lot of data, among the strings we found:</description></item><item><title>AlexCTF Re2 : C++ is fun: [100]</title><link>https://chagu.org/posts/alexctf-2017-02-05_re2/</link><pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/alexctf-2017-02-05_re2/</guid><description>So you get a binary when running it you get a message to enter the flag. When entering somthing wrong it tells you to try again. However, since I know that the flag starts with &amp;ldquo;ALEXCTF{&amp;rdquo; I trief that and got the message &amp;ldquo;You should have the flag by now&amp;rdquo; then I thought that the original code might look somthing like this
#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;using namespace std; int main () { string flag=&amp;#34;.</description></item><item><title>AlexCTF Re4: Python rev</title><link>https://chagu.org/posts/alexctf-2017-02-05_re4/</link><pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/alexctf-2017-02-05_re4/</guid><description>In this challenge we got a python byte-code file. So the first step was to get the source code for this file. By using uncompyle2 we could get the python source code. That looked like this.
import md5 md5s = [174282896860968005525213562254350376167L, 137092044126081477479435678296496849608L, 126300127609096051658061491018211963916L, 314989972419727999226545215739316729360L, 256525866025901597224592941642385934114L, 115141138810151571209618282728408211053L, 8705973470942652577929336993839061582L, 256697681645515528548061291580728800189L, 39818552652170274340851144295913091599L, 65313561977812018046200997898904313350L, 230909080238053318105407334248228870753L, 196125799557195268866757688147870815374L, 74874145132345503095307276614727915885L] print &amp;#39;Can you turn me back to python ? ...&amp;#39; flag = raw_input(&amp;#39;well as you wish.. what is the flag: &amp;#39;) if len(flag) &amp;gt; 69: print &amp;#39;nice try&amp;#39; exit() if len(flag) % 5 !</description></item><item><title>AlexCTF TR4: Flag logo</title><link>https://chagu.org/posts/alexctf-2017-02-05_tr4/</link><pubDate>Sun, 05 Feb 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/alexctf-2017-02-05_tr4/</guid><description>This challenge is just a simple warm up. They were asking about our opinion of their logo. It was an ASCII art flag. Taking a closer look you can see tha the whole flag is made of special charaters except for some numbers and letters showing up. Since I know the format of the flag will be in l337 speak. I dumped the logo in a text file. I wrote this simple script to extract the flag that was ALEXCTF{0UR_L0G0_R0CKS}</description></item><item><title>Insomni'hack teaser: Cryptoquizz (crypto/misc 50)</title><link>https://chagu.org/posts/insomnihack_teaser_2017_cryptoquiz/</link><pubDate>Sun, 22 Jan 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/insomnihack_teaser_2017_cryptoquiz/</guid><description>This was an interesting challange. You started by connecting with telnet to the server specified in the challenge description. Once connected, a question was asked: What is the birth year of [known cryptographer]? You had 2 seconds to react before the server disconnected you. Once you connected again, the server asked the same question but for a different person. I begun connecting over and over again to see if there was a pattern or if the selection of people was small.</description></item><item><title>Insomni'hack teaser: Shobot (web 200)</title><link>https://chagu.org/posts/insomnihack_teaser_2017_shobot/</link><pubDate>Sun, 22 Jan 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/insomnihack_teaser_2017_shobot/</guid><description>You were presented with an online store that sold robots. We didn&amp;rsquo;t manage to solve this challenge in time.
What we did correct The website had a function running that calculates a user&amp;rsquo;s trust level based on how many products he/she buys. If you tried any SQL injection in the URL parameters with low trust level, the server would detect it and lower your trust level. Once you reached the maximum trust level, you could successfully execute SQL injections.</description></item><item><title>Insomni'hack teaser: Smarttomcat (web 50)</title><link>https://chagu.org/posts/insomnihack_teaser_2017_smarttomcat/</link><pubDate>Sun, 22 Jan 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/insomnihack_teaser_2017_smarttomcat/</guid><description>For this challenge, you are supposed to enter the correct coordinates to find the robot cat.
For these types of challenges, I like using burp suite in order to record and modify HTTP requests. The following request was recorded when entering some random values.
POST /index.php HTTP/1.1 Host: smarttomcat.teaser.insomnihack.ch User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:50.0) Gecko/20100101 Firefox/50.0 Accept: */* Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate Content-Type: application/x-www-form-urlencoded; charset=UTF-8 X-Requested-With: XMLHttpRequest Referer: http://smarttomcat.</description></item><item><title>Insomni'hack teaser: The Great Escape I (forensics 50)</title><link>https://chagu.org/posts/insomnihack_teaser_2017_the_great_escape_1/</link><pubDate>Sun, 22 Jan 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/insomnihack_teaser_2017_the_great_escape_1/</guid><description>The challenge was in the forensic category and all we got was a .pcap-file to analyze.
Recon We opened the file in wireshark and started analyzing. While looking through the packets we recognized that almost the whole communication was encrypted. To get an overview over the used protocols we looked at the Protocol Hierarchy (Statistics -&amp;gt; Protocol Hierarchy). We see SMTP and FTP, sweet!
Extraction We filtered for ftp-data packets and followed the TCP stream (Follow -&amp;gt; TCP Stream) which revealed that bob was uploading his private key in plaintext.</description></item><item><title>Insomni'hack teaser: The Great Escape II (web 200)</title><link>https://chagu.org/posts/insomnihack_teaser_2017_the_great_escape_2/</link><pubDate>Sun, 22 Jan 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/insomnihack_teaser_2017_the_great_escape_2/</guid><description>We didn&amp;rsquo;t solve this challenge but we were working on it for quite some time. This writeup is based on https://jiulongw.github.io/post/insomnihack-2017-the-great-escape/#part-ii-web-200-pts, what we should have done.
What we did correct We found the link https://ssc.teaser.insomnihack.ch/ from the .pcap file during The Great Escape 1. We also had the username and password for the rogue account (rogue:rogue) which we could sign in to. If we visit https://ssc.teaser.insomnihack.ch/files we could see a list of uploaded files.</description></item></channel></rss>