<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Volatility on ChaGu CTF</title><link>https://chagu.org/tags/volatility/</link><description>Recent content in Volatility on ChaGu CTF</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Sep 2017 11:22:32 +0200</lastBuildDate><atom:link href="https://chagu.org/tags/volatility/index.xml" rel="self" type="application/rss+xml"/><item><title>SEC-T CTF: G1bs0n - misc 300</title><link>https://chagu.org/posts/sec-t_2017_g1bs0n_misc_300/</link><pubDate>Fri, 15 Sep 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/sec-t_2017_g1bs0n_misc_300/</guid><description>@mjdubell - ChalmersCTF Agent Gill called, we have until tomorrow at 15:00 UTC to fix some virus problem. File: G1bs0n.tar.gz Even though I followed too many rabbit holes, this was a fun challenge to work on. In order to solve this challenge, you would need some basic understanding on how to analyze memory dumps. I solved this challenge with volatility which is a forensic tool for analyzing memory dumps, and it&amp;rsquo;s built with python!</description></item></channel></rss>