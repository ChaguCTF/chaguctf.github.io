<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Forensics on ChaGu CTF</title><link>https://chagu.org/tags/forensics/</link><description>Recent content in Forensics on ChaGu CTF</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Sep 2017 11:22:32 +0200</lastBuildDate><atom:link href="https://chagu.org/tags/forensics/index.xml" rel="self" type="application/rss+xml"/><item><title>SEC-T CTF: G1bs0n - misc 300</title><link>https://chagu.org/posts/sec-t_2017_g1bs0n_misc_300/</link><pubDate>Fri, 15 Sep 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/sec-t_2017_g1bs0n_misc_300/</guid><description>@mjdubell - ChalmersCTF Agent Gill called, we have until tomorrow at 15:00 UTC to fix some virus problem. File: G1bs0n.tar.gz Even though I followed too many rabbit holes, this was a fun challenge to work on. In order to solve this challenge, you would need some basic understanding on how to analyze memory dumps. I solved this challenge with volatility which is a forensic tool for analyzing memory dumps, and it&amp;rsquo;s built with python!</description></item><item><title>Pragyan CTF 2017: The Vault (75pts)</title><link>https://chagu.org/posts/pragyan-ctf-2017_misc2/</link><pubDate>Sun, 05 Mar 2017 11:22:32 +0200</pubDate><guid>https://chagu.org/posts/pragyan-ctf-2017_misc2/</guid><description>By: ChalmersCTF
Challenge Description : [!@# a-z $%^ A-Z &amp;amp;* 0-9] [1,3] File : file
Solution: Running file on the included file revealed that its a keepass file. And the regex seems to be the clue about the password.
$ file file file.kdb: Keepass password database 1.x KDB, 3 groups, 4 entries, 50000 key transformation rounds So we generate passwordlist using the regex
#!/usr/bin/env python import string import itertools table = string.</description></item></channel></rss>